/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <100>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rectangleToLeftSide: rectangleToLeftSide {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LCMD>,
                <&macro_tap>,
                <&kp LEFT_ARROW>,
                <&macro_release>,
                <&kp LCTRL &kp LCMD>;

            label = "rectangleToLeftSide";
        };

        rectangleToRightSide: rectangleToRightSide {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LCMD>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LCTRL &kp LCMD>;

            label = "RECTANGLETORIGHTSIDE";
        };

        rectangleCenter: rectangleCenter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LCMD>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LCTRL &kp LCMD>;

            label = "RECTANGLECENTER";
        };

        rectangleFullScreen: rectangleFullScreen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LCMD>,
                <&macro_tap>,
                <&kp F>,
                <&macro_release>,
                <&kp LCTRL &kp LCMD>;

            label = "RECTANGLEFULLSCREEN";
        };

        goToLeft: goToLeft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp LEFT_ARROW>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "GOTOLEFT";
        };

        goToRight: goToRight {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp RIGHT_ARROW>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "GOTORIGHT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC  &kp Q                &kp W            &kp E        &kp R              &kp T        &kp Y      &kp U               &kp I        &kp O            &kp P            &kp BSPC
&kp TAB  &hrm LEFT_CONTROL A  &hrm LEFT_ALT S  &hrm LCMD D  &hrm LEFT_SHIFT F  &kp G        &kp H      &hrm RIGHT_SHIFT J  &hrm LCMD K  &hrm LEFT_ALT L  &hrm LCTRL SEMI  &kp SQT
&none    &kp GRAVE            &kp Z            &kp X        &kp C              &kp V        &kp B      &kp N               &kp M        &kp COMMA        &kp PERIOD       &kp SLASH
                                               &kp LCMD     &mo 1              &kp SPACE    &kp SPACE  &mo 2               &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1     &kp N2        &kp N3    &kp N4          &kp N5    &kp N6         &kp N7                         &kp N8                   &kp N9               &kp N0            &kp BSPC
&trans  &kp LCTRL  &kp LEFT_ALT  &kp LCMD  &kp LEFT_SHIFT  &none     &kp BACKSLASH  &hrm RIGHT_SHIFT LEFT_BRACKET  &hrm LCMD RIGHT_BRACKET  &hrm LEFT_ALT MINUS  &hrm LCTRL EQUAL  &kp ENTER
&trans  &none      &none         &none     &none           &none     &none          &none                          &none                    &none                &none             &none
                                 &trans    &trans          &trans    &trans         &trans                         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &none      &none         &none     &kp PG_UP                  &kp HOME    &rectangleToLeftSide  &rectangleCenter  &rectangleFullScreen  &rectangleToRightSide  &none      &none
&trans  &kp LCTRL  &kp LEFT_ALT  &kp LCMD  &hrm LEFT_SHIFT PAGE_DOWN  &kp END     &kp LEFT_ARROW        &kp DOWN_ARROW    &kp UP_ARROW          &kp RIGHT              &kp LCTRL  &kp ENTER
&trans  &none      &none         &none     &none                      &none       &none                 &goToLeft         &goToRight            &none                  &none      &none
                                 &trans    &trans                     &trans      &trans                &trans            &trans
            >;
        };

        layer_3 {
            bindings = <
&kp F1        &kp F2     &kp F3                &kp F4                  &kp F5                       &kp F6          &kp F7      &kp F8           &kp F9        &kp F10       &kp F11       &kp F12
&kp CAPSLOCK  &kp LCTRL  &hrm LEFT_ALT C_NEXT  &hrm LCMD C_PLAY_PAUSE  &hrm LEFT_SHIFT C_VOLUME_UP  &kp C_BRI_UP    &none       &kp RIGHT_SHIFT  &kp LCMD      &kp LEFT_ALT  &kp LCTRL     &none
&none         &none      &kp C_PREV            &none                   &kp C_VOLUME_DOWN            &kp C_BRI_DN    &bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                                               &trans                  &trans                       &trans          &trans      &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        thirdLayer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
